/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SelectTransitionsDialog.java
 *
 * Created on Aug 13, 2011, 4:53:20 PM
 */
package ApplicationGUI;

import CustomizedClasses.Entry;
import DataModel.dmStateVariableTemplate;
import DataModel.dmTransitionTemplate;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author fairfax
 */
public class SelectTransitionsDialog extends javax.swing.JDialog {

    private static DefaultListModel stateVarListModel = new DefaultListModel();
    private static DefaultListModel transitionListModel = new DefaultListModel();
    private static DefaultListModel selectionListModel = new DefaultListModel();
    
    /** Creates new form SelectTransitionsDialog */
    public SelectTransitionsDialog(java.awt.Frame parent, boolean modal, List<dmStateVariableTemplate> stateVars) {
        super(parent, modal);
        
        for (dmStateVariableTemplate stVar: stateVars) {        
            stateVarListModel.addElement(stVar);            // initialize stateVarListModel
        }
        
        assert(!stateVarListModel.isEmpty()); // if there are no state variables there is no reason to invoke this dialog

        initComponents();           // stateVarListModel and transitionListModel are set
        
        stateVarList.setSelectedIndex(0); // select first state variable (there should be at least one) viz. assert ^
    }

    public static List<Entry<String,dmTransitionTemplate>> showDialog(java.awt.Frame parent, List<dmStateVariableTemplate> stateVars) {
        SelectTransitionsDialog dialog = new SelectTransitionsDialog(parent,true,stateVars);

        dialog.setVisible(true);

        // assemble result: Entry<"stateVarNAme(arg1,...,argn)",dmTransitionTemplate>
        List<Entry<String,dmTransitionTemplate>> result = new LinkedList<Entry<String,dmTransitionTemplate>>();
        for (int i=0; i<selectionListModel.getSize(); ++i) {
            Entry<String,dmTransitionTemplate> item = (Entry<String,dmTransitionTemplate>)selectionListModel.get(i);
            result.add(item);
        }
        
        stateVarListModel.clear();  // clear static content
        transitionListModel.clear();
        selectionListModel.clear();

        return result;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        doneButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stateVarList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        prevailingCheckbox = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        transitionList = new javax.swing.JList();
        includeButton = new javax.swing.JButton();
        excludeButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectionList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("State variable declarations"));

        stateVarList.setModel(stateVarListModel);
        stateVarList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                stateVarListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(stateVarList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("State variable transitions"));

        prevailingCheckbox.setText("prevailing");
        prevailingCheckbox.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                prevailingCheckboxStateChanged(evt);
            }
        });

        transitionList.setModel(transitionListModel);
        jScrollPane3.setViewportView(transitionList);

        includeButton.setText("Include");
        includeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeButtonActionPerformed(evt);
            }
        });

        excludeButton.setText("Exclude");
        excludeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excludeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                    .addComponent(prevailingCheckbox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(includeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(excludeButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(prevailingCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(includeButton)
                    .addComponent(excludeButton))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected transitions"));

        selectionList.setModel(selectionListModel);
        jScrollPane1.setViewportView(selectionList);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel1.setText("Select transitions dialog");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doneButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doneButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void stateVarListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_stateVarListValueChanged
    if (evt.getValueIsAdjusting()) {
        return;
    }

    fillTransitionList();
}//GEN-LAST:event_stateVarListValueChanged

private void prevailingCheckboxStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_prevailingCheckboxStateChanged
    fillTransitionList();
}//GEN-LAST:event_prevailingCheckboxStateChanged

private void includeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeButtonActionPerformed
    Object[] transSelection = transitionList.getSelectedValues();
 
    dmStateVariableTemplate selectedStateVar = getSelectedStateVariable();
    
    // make entries for selectionList
    for (int i=0; i<transSelection.length; ++i) {
        // create entry
        String stateVarString = selectedStateVar.toString();
        dmTransitionTemplate templ = (dmTransitionTemplate) transSelection[i];
        Entry<String,dmTransitionTemplate> newEntry = new Entry<String,dmTransitionTemplate>(stateVarString,templ);
        // insert entry to list
        selectionListModel.addElement(newEntry);
    }
    
    // deselect selected items
    transitionList.clearSelection();
}//GEN-LAST:event_includeButtonActionPerformed

private void excludeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excludeButtonActionPerformed
    int[] excluded = selectionList.getSelectedIndices();
    
    for (int i=0; i<excluded.length; ++i) {
        selectionListModel.remove(excluded[i]);
    }
}//GEN-LAST:event_excludeButtonActionPerformed

private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
    this.setVisible(false); // setVisible(true) returns now
}//GEN-LAST:event_doneButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton doneButton;
    private javax.swing.JButton excludeButton;
    private javax.swing.JButton includeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox prevailingCheckbox;
    private javax.swing.JList selectionList;
    private javax.swing.JList stateVarList;
    private javax.swing.JList transitionList;
    // End of variables declaration//GEN-END:variables

    private dmStateVariableTemplate getSelectedStateVariable() {
        if (stateVarList.getSelectedIndices().length <= 0) {
            return null;
        }

        Object result = stateVarList.getSelectedValue();

        assert (result instanceof dmStateVariableTemplate);

        return (dmStateVariableTemplate) result;
    }

    private void fillTransitionList() {
        dmStateVariableTemplate selected = getSelectedStateVariable();
        
        if (selected == null) { // when closing dialog
            return;
        }
        
        transitionListModel.clear();

        List<dmTransitionTemplate> transitions = selected.getTransitionList(prevailingCheckbox.isSelected());

        for (dmTransitionTemplate trans : transitions) {
            transitionListModel.addElement(trans);          // fill with new data
        }
    }
}
